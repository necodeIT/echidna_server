import 'package:echidna_server/echidna_server.dart';
import 'package:shelf/shelf.dart';
import 'package:shelf_modular/shelf_modular.dart';

/// Adds a new Customer to the DB with and returns the new Customer with the id generated by the DB.
Future<Response> createCustomerHandler(Request request, Injector i, ModularArguments args) async {
  final prisma = i.get<PrismaClient>();

  final name = args.data['name'] as String?;
  final email = args.data['email'] as String?;

  if (name == null || email == null) {
    request.log('Bad Request: Customer name and email required');
    return Response.badRequest(body: 'Customer name and email are required.');
  }

  try {
    final customer = await prisma.$transaction(
      (prisma) => prisma.customer.create(
        data: PrismaUnion.$1(
          CustomerCreateInput(
            name: name,
            email: email,
          ),
        ),
      ),
      isolationLevel: TransactionIsolationLevel.serializable,
    );
    request.log('Added customer $name to database');

    return customer.toResponse();
  } on Exception catch (e, s) {
    request.log('Failed to add customer', e, s);
    return Response.internalServerError();
  }
}
